#
######## xlOil Dev Settings ###########################################
#
# This is a version of xlOil.ini which is copied to the build directory
# when xloil.xll is built. Its purpose is to configure dev settings 
# without accidentally overwriting the distriuted xloil.ini file
#
#######################################################################
#
[Addin]

##### Plugins to load
#
# Load these plugins. The directory containing xloil.dll is searched
# first, then the normal DLL search path order.
#
Plugins=["xlOil_Python", "xlOil_SQL", "xlOil_Utils"]

##### Log file settings 
#
# Intensity of logging, choose from:
# "trace", "debug", "info", "warning", "error", "critical", "off"
#
LogLevel="trace"

#
# Level at which xlOil will pop up a log window to display recent 
# log entries
#
LogPopupLevel="error"

#
# The log file is created at <name-of-ini-file>.log and in the same 
# directory unless specified below
#
#LogFile="my.log"

#
# Log file rotation is controlled by these two parameters. A single
# log file can grow to the *LogMaxSize* in Kb. Once this limit is
# reached, a new blank log file is started, existing old log files
# are renamed and the oldest is deleted to ensure maximum of 
# *LogNumberOfFiles* files.
# 
#LogMaxSize="512"
#LogNumberOfFiles="2"

#
# Enable this to help diagnose problems with loading xlOil.dll
# from the xll loader
# 
#StartupTrace=true

# If you have an ini file at %APPDATA%\xlOil\xlOil.ini, the core xlOil.dll
# is loaded using those settings before any other xlOil-based XLL. The assumption
# is that you have xlOil installed, but since only one instance of xlOil 
# can be hosted in Excel, one settings file must take precedence. The below option
# allows an XLL to be loaded before the core.
# LoadBeforeCore="False"

##### Date
#
# The date formats xlOil will attempt to parse for a string to date
# conversion. Syntax follows C++ get_time here: 
# https://en.cppreference.com/w/cpp/io/manip/get_time
# Note the date parsing is case sensitive because get_time is case 
# sensitive on Windows.
#
DateFormats=["%Y-%m-%d", "%Y%b%d"]

# 
# The key XLOIL_PATH is edited by the xlOil_Install powershell script
# Note: Use [[]] syntax because the order of Environment variables matters
#
#[[Addin.Environment]]
#XLOIL_PATH=""
#[[Addin.Environment]]
#PATH='''%PATH%;%XLOIL_PATH%'''


##### Python Plugin Settings
#
[xlOil_Python]
#
# Python modules to load on start up. Must be on python's sys.path
#
LoadModules=["xloil.xloil_ribbon"]

#
# On workbook open, look for a python file matching this template 
# where * is replaced by the Excel workbook name
#
WorkbookModule="*.py"

#
# Look for a module matching this pattern in the directory of the 
# XLL when it is loaded where '*' is replaced with the addin name.
# The default is "*.py" which means an ini file is optional for a 
# simple addin
#
#AddinModule="*.py"

#
# Calls Py_SetPath before initialising python. This allows explict
# specification of python's sys.path rather than using the usual
# search routine, which overrides any setting of PYTHONPATH.
# Generally this option is not required.
#
#SetSysPath='''.'''

#
# Sets the library for COM support. This is used by the `xloil.app` 
# and `to_com` functions although can be override on a per-call basis.
# The default is 'win32com', 'comtypes' is also available. 
#
#ComLib="comtypes"

#
# Selects the debugger to use. The choices are:
#   * Visual Studio 2019+ : no need to pre-select this, just attach to 
#     a running Excel process
#   * VS Code: choose `vscode` or `debugpy`. The `DebugPyPort` attribute
#     then determines the port on which the server listens.
#   * Pdb: choose 'pdb'
#
Debugger = ""

#
# Determines the port on which the server listens.
# 
DebugPyPort = "5678"

##### Python Environment
#
# We need to set the python environment paths. Usually this is done automatically 
# by `xloil install` or `xloil create` or the ribbon.
#
# Usually just set PYTHONEXECUTABLE - python should be able to figure out the rest.
# xlOil also uses this variable to help detect the presence of a virtual Environment. 
# Alternatively set the PYTHONPATH, PYTHONHOME and PATH directly as required by your
# distribution.
#
# Note environment vars can be set by dynamically expanding a registry key.
#
[xlOil_Python.Environment]
    
	PYTHONCASEOK="1"

	#
	# If this environment variable is set, xlOil tries to load the corresponding
	# pythonXY.dll as the interpreter. If unset or blank, xlOil uses the reported
	# python version of the interpreter in the first python dist found.
	# 
	XLOIL_PYTHON_VERSION=""

    #
	# PYTHONEXECUTABLE should point to the python.exe of the current environment.
	# Note it is possible to dynamically expand registry keys contained in angle 
	# brackets <>.
	#
	PYTHONEXECUTABLE='''<HKLM\SOFTWARE\Python\ContinuumAnalytics\Anaconda39-64\InstallPath\ExecutablePath>'''
	#PYTHONEXECUTABLE='''<HKLM\SOFTWARE\Python\PythonCore\3.6\InstallPath\ExecutablePath>'''

	XLOIL_PYTHON_PATH=""

	PYTHONPATH='''%PYTHONPATH%'''
