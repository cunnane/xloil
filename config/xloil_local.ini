#
######## xlOil Dev Settings ###########################################
#
# This is a version of xlOil.ini which is copied to the build directory
# when xloil.xll is built. Its purpose is to configure dev settings 
# without accidentally overwriting the distriuted xloil.ini file
#
#######################################################################
#
[Addin]

##### Plugins to load
#
# Load these plugins. The directory containing xloil.dll is searched
# first, then the normal DLL search path order.
#
Plugins=["xlOil_Python", "xlOil_SQL", "xlOil_Utils"]

##### Log file settings 
#
# Intensity of logging, choose from:
# "trace", "debug", "info", "warning", "error", "critical", "off"
#
LogLevel="trace"

#
# Level at which xlOil will pop up a log window to display recent 
# log entries
#
LogPopupLevel="error"

#
# The log file is created at <name-of-ini-file>.log and in the same 
# directory unless specified below
#
#LogFile="my.log"

#
# Log file rotation is controlled by these two parameters. A single
# log file can grow to the *LogMaxSize* in Kb. Once this limit is
# reached, a new blank log file is started, existing old log files
# are renamed and the oldest is deleted to ensure maximum of 
# *LogNumberOfFiles* files.
# 
#LogMaxSize="512"
#LogNumberOfFiles="2"

#
# Enable this to help diagnose problems with loading xlOil.dll
# from the xll loader
# 
#StartupTrace=true

# If you have an ini file at %APPDATA%\xlOil\xlOil.ini, the core xlOil.dll
# is loaded using those settings before any other xlOil-based XLL. The assumption
# is that you have xlOil installed, but since only one instance of xlOil 
# can be hosted in Excel, one settings file must take precedence. The below option
# allows an XLL to be loaded before the core.
# LoadBeforeCore="False"

##### Date
#
# The date formats xlOil will attempt to parse for a string to date
# conversion. Syntax follows C++ get_time here: 
# https://en.cppreference.com/w/cpp/io/manip/get_time
# Note the date parsing is case sensitive because get_time is case 
# sensitive on Windows.
#
DateFormats=["%Y-%m-%d", "%Y%b%d"]

# 
# The key XLOIL_PATH is edited by the xlOil_Install powershell script
# Note: Use [[]] syntax because the order of Environment variables matters
#
#[[Addin.Environment]]
#XLOIL_PATH=""
#[[Addin.Environment]]
#PATH='''%PATH%;%XLOIL_PATH%'''


##### Python Plugin Settings
#
[xlOil_Python]
#
# Python modules to load on start up. Must be on python's sys.path
#
LoadModules=["xloil.jupyter"]

#
# On workbook open, look for a python file matching this template 
# where * is replaced by the Excel workbook name
#
WorkbookModule="*.py"

#
# Look for a module matching this pattern in the directory of the 
# XLL when it is loaded where '*' is replaced with the addin name.
# The default is "*.py" which means an ini file is optional for a 
# simple addin
#
#AddinModule="*.py"

#
# Calls Py_SetPath before initialising python. This allows explict
# specification of python's sys.path rather than using the usual
# search routine, which overrides any setting of PYTHONPATH.
# Generally this option is not required.
#
#SetSysPath='''.'''

#
# Sets the library for COM support. This is used by the `xloil.app` 
# and `to_com` functions although can be override on a per-call basis.
# The default is 'win32com', 'comtypes' is also available. 
#
#ComLib="comtypes"

##### Python Environment
#
# We need to set the python environment paths.  There are two approaches:
#
#   1. Set PYTHONPATH, PYTHONHOME and PATH directly. Some distributions
#      may need more or fewer variables set. To use the Qt library for
#      custom task panes, we also need QT_QPA_PLATFORM_PLUGIN_PATH
#   2. Find the Python paths in the Windows registry. The registry
#      keys vary by python distribution (see below).
#
# Usually this is done automatically by `xloil install` or `xloil create` 
# (in which case the  registry-based approach will be commented out)
# 
# Note: (Use [[]] syntax because the order of Environment variables matters)
#
[[xlOil_Python.Environment]]
    
	PYTHONCASEOK="1"

	#
	# The registry keys are relative to HKLM\SOFTWARE.
	#
	xlOil_PythonRegKey = '''Python\ContinuumAnalytics\Anaconda39-64'''
	#xlOil_PythonRegKey = '''Python\PythonCore\3.9'''

	#
	# (The xlOil_ env vars below have no special function, they are just used 
	# in the environment variable expansions)
	#
[[xlOil_Python.Environment]]
	xlOil_RegistryPythonRoot='''<HKLM\SOFTWARE\%xlOil_PythonRegKey%\InstallPath\>'''
	xlOil_RegistryPythonPath='''<HKLM\SOFTWARE\%xlOil_PythonRegKey%\PythonPath\>'''

[[xlOil_Python.Environment]]
	xlOil_PythonRoot='''%xlOil_RegistryPythonRoot%'''

[[xlOil_Python.Environment]]
	PYTHONPATH='''%PYTHONPATH%;%xlOil_RegistryPythonPath%;'''
	PYTHONHOME='''%xlOil_PythonRoot%'''
	PATH='''%PATH%;%xlOil_PythonRoot%;%xlOil_PythonRoot%\Library\bin'''
	
	# Allows Qt to find its plugins directory. This may not always be required but
	# I found it was needed for Anaconda
	QT_QPA_PLATFORM_PLUGIN_PATH='''%xlOil_PythonRoot%\Library\plugins\platforms'''
