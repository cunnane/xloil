#
######## xlOil Settings #########
#
# This is a TOML file.
#
#################################
#
[Addin]

##### Plugins to load
#
# Load these plugins. The directory containing xloil.dll is searched
# first, then the normal DLL search path order.
#
Plugins=["xlOil_Python", "xlOil_SQL", "xlOil_Utils"]

#
# Load any plugins in the same directory as the core dll which 
# match this pattern.
#
#PluginSearchPattern="xloil_*.dll"


##### Log file settings 
#
# Intensity of logging, choose from:
# "trace", "debug", "info", "warning", "error", "critical", "off"
#
LogLevel="warning"

#
# Level at which xlOil will pop up a log window to display recent 
# log entries
#
LogPopupLevel="error"

#
# The log file is created at <name-of-ini-file>.log and in the same 
# directory unless specified below
#
#LogFile="my.log"

#
# Log file rotation is controlled by these two parameters. A single
# log file can grow to the *LogMaxSize* in Kb. Once this limit is
# reached, a new blank log file is started, existing old log files
# are renamed and the oldest is deleted to ensure maximum of 
# *LogNumberOfFiles* files.
# 
#LogMaxSize="512"
#LogNumberOfFiles="2"

#
# Enable this to help diagnose problems with loading xlOil.dll
# from the xll loader
# 
#StartupTrace=true

# If you have an ini file at %APPDATA%\xlOil\xlOil.ini, the core xlOil.dll
# is loaded using those settings before any other xlOil-based XLL. Since only one 
# instance of xlOil can be hosted in Excel, one settings file must take precedence. 
# The assumption is that if you have xlOil installed, you want those settings to 
# be the primary ones.  The below option, when used in a XLL-specific ini file,
# allows it to be loaded before the core.
# LoadBeforeCore="False"

##### Date
#
# The date formats xlOil will attempt to parse for a string to date
# conversion. Syntax follows C++ get_time here: 
# https://en.cppreference.com/w/cpp/io/manip/get_time
# Note the date parsing is case sensitive because get_time is case 
# sensitive on Windows.
#
DateFormats=["%Y-%m-%d", "%Y%b%d"]

# 
# The key XLOIL_PATH is edited by the xlOil_Install powershell script
# Note: Use [[]] syntax because the order of Environment variables matters
#
[[Addin.Environment]]
XLOIL_PATH=""
[[Addin.Environment]]
PATH='''%PATH%;%XLOIL_PATH%'''


##### Python Plugin Settings
#
[xlOil_Python]
#
# Python modules to load on start up. Must be on python's sys.path.
# xlOil provides the following optional modules:
#   * xloil.xloil_ribbon: adds a ribbon toolbar with some useful functions
#   * xloil.jupyter: adds jupyter interaction
#
LoadModules=["xloil.xloil_ribbon"]

#
# On workbook open, look for a python file matching this template 
# where * is replaced by the Excel workbook name
#
WorkbookModule="*.py"

#
# Look for a module matching this pattern in the directory of the 
# XLL when it is loaded where '*' is replaced with the addin name.
# The default is "*.py" which means an ini file is optional for a 
# simple addin
#
#AddinModule="*.py"

#
# Calls Py_SetPath before initialising python. This allows explict
# specification of python's sys.path rather than using the usual
# search routine, which overrides any setting of PYTHONPATH.
# Generally this option is not required.
#
#SetSysPath='''.'''

#
# Sets the library for COM support. This is used by the `xloil.app` 
# and `to_com` functions although can be override on a per-call basis.
# The default is 'win32com', 'comtypes' is also available. 
#
#ComLib="comtypes"


#
# Selects the debugger to use. The choices are:
#   * Visual Studio 2019+ : no need to pre-select this, just attach to 
#     a running Excel process
#   * VS Code: choose `vscode` or `debugpy`. The `DebugPyPort` attribute
#     then determines the port on which the server listens.
#   * Pdb: choose 'pdb'
#
Debugger = ""

#
# Determines the port on which the server listens.
# 
DebugPyPort = "5678"

#
# Selects the type of console opened when the 'Console' button in the 
# ribbon toolbar is pressed:
#
#   tk          - simple tk powered console
#   ipython     - rich jupyter ipython console 
#   ipythonmain - as ipython but all commands are executed on Excel's main thread
#
# The default choice of IPythonMain (case insensitive) is the safest as COM /
# application object commands can be executed without wrapping them in an invocation
# of xloil.excel_callback. The tk console opens the fastest.
#
RibbonConsole = "IPythonMain"

##### Python Environment
#
# Usually this is done automatically by `xloil install` or `xloil create` 
# or by the xlOil ribbon toolbar. To set the paths manually there are two
# approaches:
#
#   1. Set PYTHONPATH, PYTHONHOME and PATH directly. Some distributions
#      may need more or fewer variables set. To use the Qt library for
#      custom task panes, we also need QT_QPA_PLATFORM_PLUGIN_PATH
#   2. Find the Python paths in the Windows registry. The registry
#      keys vary by python distribution (see below).
#
# 
# Note: (Use [[]] syntax because the order of Environment variables matters)
#
[[xlOil_Python.Environment]]
	#
	# Tells python to do case-insensitve module name lookup and so minimises 
	# surprises on windows when creating workbook and addin modules. Recommended!
	#
    PYTHONCASEOK="1"

	#
	# If this environment variable is set, xlOil tried to load the corresponding
	# pythonXY.dll as the interpreter. If unset or blank, xlOil uses the reported
	# python version of the interpreter in the PYTHONHOME directory.
	# 
	XLOIL_PYTHON_VERSION=""

	#
	# Additional paths to add to python's sys.path. Prefer to add user search
	# paths here and reserve the PYTHONPATH setting below for system paths. 
	#
	XLOIL_PYTHON_PATH=""

	#
	# The registry keys are relative to HKLM\SOFTWARE. This setting may not be
	# used if the PYTHONPATH and PYTHONHOME variables below are overriden
	#
	xlOil_PythonRegKey = '''Python\ContinuumAnalytics\Anaconda39-64'''
	#xlOil_PythonRegKey = '''Python\PythonCore\3.9'''

[[xlOil_Python.Environment]]
	PYTHONPATH='''%PYTHONPATH%;<HKLM\SOFTWARE\%xlOil_PythonRegKey%\PythonPath\>'''
	PYTHONHOME='''<HKLM\SOFTWARE\%xlOil_PythonRegKey%\InstallPath\>'''

[[xlOil_Python.Environment]]
	PATH='''%PATH%;%PYTHONHOME%;%PYTHONHOME%\Library\bin'''
	PYTHONPATH='''%PYTHONPATH%;%XLOIL_PYTHON_PATH%'''

	# Allows Qt to find its plugins directory. This may not always be required but
	# I found it was needed for Anaconda
	QT_QPA_PLATFORM_PLUGIN_PATH='''%PYTHONHOME%\Library\plugins\platforms'''
